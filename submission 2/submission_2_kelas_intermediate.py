# -*- coding: utf-8 -*-
"""Submission 2 - Kelas Intermediate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10k0K0-YtLyLeMvyplxQMEalw0uz1HVKg
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

"""# Dataset

## Load Dataset
"""

url = 'https://raw.githubusercontent.com/ferys2195/Dataset/main/timeseries/GercekZamanliTuketim-01072015-30062020.csv'
df = pd.read_csv(url)
len(df)

"""## Cek Dataset"""

df.head()

df.info()

df.isnull().sum()

"""## Cleaning Data

### Buat Kolom datetime

Pada dataset terdapat kolom **Date** dan **Time**, untuk menyederhanakan dataset maka gabungkan kedua kolom tersebut menjadi satu kolom
"""

# Menggabungkan kolom 'date' dan 'time' menjadi satu kolom 'datetime'
df['datetime'] = df['Date'] + ' ' + df['Time']

# Menghapus kolom 'date' dan 'time' yang sudah digabung
df = df.drop(['Date', 'Time'], axis=1)

df.info()

"""### Buat variabel untuk mengatur dataset"""

time = "datetime"
series = "Consumption Amount (MWh)"

"""### Ubah Type Data Pada Dataset"""

df[time]=pd.to_datetime(df[time])
df[series] = df[series].apply(lambda x: x.split(',')[0]).astype(float)

df.info()

"""### Mengatur Index Dataset"""

df.set_index(time, inplace=True)

df = df.sort_index()

df.head()

"""### Tampilkan Dataset pada grafik"""

plt.figure(figsize = (15, 6))
plt.plot(df)
plt.xlabel('Date', {'fontsize': 12})
plt.ylabel('Consumption Amount', {'fontsize': 12})
plt.title('Number Sold Of Product 1 In The First Store')
plt.show()

"""### Tampung Dataset pada Variabel Baru"""

dataset = pd.DataFrame(df[series])
data = dataset.values

data.shape

"""### Normalisasi Dataset"""

scaler = MinMaxScaler(feature_range= (0, 1))
scaled_data = scaler.fit_transform(np.array(data))

"""### Mengatur Nilai X dan Y Dataset"""

x = []
y = []
time_steps = 60

for i in range(time_steps, len(scaled_data)):
    x.append(scaled_data[i-time_steps:i, :1])
    y.append(scaled_data[i, :1])

x, y = np.array(x), np.array(y)

"""### Split Dataset Menjadi Train (80%) dan Test (20%)"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, shuffle=False)

x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

x_train.shape , y_train.shape

print(len(x_train), len(x_test))

"""# Model

## Buat Model Sequential
"""

model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(50, return_sequences = True, input_shape= (x_train.shape[1], 1)),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(32),
    tf.keras.layers.Dense(1)
])

"""## Membangun Optimizer Model menggunakan Learning Rate"""

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

"""## Print Nilai Mae dibawah 10%"""

threshold_mae = (x_train.max() - x_train.min()) * 10/100
print(f"Nilai minimal mae di bawah 10% : {threshold_mae}")

"""## Buat Callback Model"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< threshold_mae):
      self.model.stop_training = True
      print("\nMAE dari model tercapai < 10% dari skala data")
callbacks = myCallback()

"""## Mengatur Float menjadi Float64"""

tf.keras.backend.set_floatx('float64')

"""## Latih Model"""

history = model.fit(x_train, y_train, validation_data = (x_test, y_test),epochs=100, steps_per_epoch=25, callbacks=[callbacks], verbose=2)

"""# Output Pelatihan Model"""

# Membuat subplot dengan lebar yang berbeda
fig, axs = plt.subplots(1, 2, figsize=(15, 7), gridspec_kw={'width_ratios': [1, 1]})

# Plot MAE di subplot pertama
axs[0].plot(history.history['mae'])
axs[0].plot(history.history['val_mae'])
axs[0].set_title('MAE')
axs[0].set_ylabel('Mae')
axs[0].set_xlabel('Epoch')
axs[0].legend(['train', 'test'], loc='upper right')

# Plot Loss di subplot kedua
axs[1].plot(history.history['loss'])
axs[1].plot(history.history['val_loss'])
axs[1].set_title('Model Loss')
axs[1].set_ylabel('Loss')
axs[1].set_xlabel('Epoch')
axs[1].legend(['train', 'test'], loc='upper right')

plt.show()